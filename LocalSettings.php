<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if(PHP_SAPI != 'cli'){
    if(phpversion() < 5.4){
        error_reporting(E_ALL);
    }
    else{
        error_reporting(E_ALL ^ E_STRICT ^ E_DEPRECATED);
    }
    ini_set("display_errors", 1);

    header('Cache-Control: no-cache, no-store, must-revalidate');
    header('Pragma: no-cache');
    header('Expires: 0');
    
    if(!isset($_GET['embed'])){
        header('X-Frame-Options: SAMEORIGIN');
    }
}

date_default_timezone_set('America/Edmonton');
if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}

if(!defined('TESTING')){
    if(file_exists("$IP/test.tmp")){
        define("TESTING", true);
    }
    else{
        define("TESTING", false);
    }
}

define("EOT", "9999-01-01"); // End of Time

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );


require_once("Classes/countries.php");
require_once( "$IP/Classes/Patch.php" );
require_once( "$IP/config/ForumConfig.php" );

// Hack to change to MYSQLI_ASSOC in doFetchRow
$objPatch = new Patch("$IP/includes/libs/rdbms/database/resultwrapper/MysqliResultWrapper.php");
$objPatch->redefineFunction("
    protected function doFetchRow() {
	\$array = \$this->result->fetch_array(MYSQLI_ASSOC); // Changed to MYSQLI_ASSOC
	\$this->checkFetchError();
	if ( \$array === null ) {
		return false;
	}
	return \$array;
}");
eval($objPatch->getCode());

$wgDeprecationReleaseLimit = '1.0';

$wgBaseDirectory = MW_INSTALL_PATH;

## Path settings
$wgSitename         = $config->getValue("siteName");
$wgServer           = $config->getValue("server");
$wgScriptPath       = $config->getValue("path");
$wgArticlePath      = "{$wgScriptPath}/index.php/$1";

## Database settings
$wgDBtype           = $config->getValue("dbType");
$wgDBserver         = $config->getValue("dbServer");
$wgDBname           = $config->getValue("dbName");
$wgTestDBname       = $config->getValue("dbTestName");

## Database credentials
$wgDBuser           = $config->getValue("dbUser");
$wgDBpassword       = $config->getValue("dbPassword");

$wgDBadminuser           = $config->getValue("dbUser");
$wgDBadminpassword       = $config->getValue("dbPassword");

## From MediaWiki manual:
##   "This value is used to generate a persistent cookie
##    for authentication that is resilient to spoofing."
$wgSecretKey = "7b32642dd51dcddf7a65fa3bea2757256caebc0220154c52ec8aebea1b87d7bf";

## Mailing List settings
$wgListAdmins           = $config->getValue("listAdmins");
$wgListAdminPassword    = $config->getValue("listAdminPassword");

$wgFavicon          = "$wgServer$wgScriptPath/favicon.ico";

if(TESTING && !defined('INIT_TESTING')){
    $wgDBname = $wgTestDBname;
}

# If PHP's memory limit is very low, some operations may fail.
//ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression

# $wgDisableOutputCompression = true;

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL

$wgScriptExtension  = ".php";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = $config->getValue('supportEmail');
if($config->getValue('passwordSender') != ""){
    $wgPasswordSender = $config->getValue('passwordSender');
}
else{
    $wgPasswordSender = @explode(",", $config->getValue('supportEmail'))[0];
}

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;
$wgEnableParserLimitReporting = false;
if($config->getValue('setMailEnvelope')){
    $wgAdditionalMailParams = "-f {$config->getValue('supportEmail')}";
}

if(TESTING){
    $wgEnableEmail      = false;
    $wgEnableUserEmail  = false; # UPO
    $wgEmailAuthentication = false;
    $wgEnotifUserTalk = false; # UPO
    $wgEnotifWatchlist = false; # UPO
}

$wgAllowHTMLEmail = true;

# MySQL specific settings
$wgDBprefix         = "mw_";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgDisableCounters = true;
$wgJobRunRate = 0.01;
$wgSessionsInObjectCache = true;
$wgEnableSidebarCache = true;
if($config->getValue('localizationCache') != ""){
    if(!file_exists($config->getValue('localizationCache')) && 
       is_writable($config->getValue('localizationCache'))){
        mkdir($config->getValue('localizationCache'));
    }
    if(file_exists($config->getValue('localizationCache'))){
        $wgCacheDirectory = $config->getValue('localizationCache');
        $wgUseLocalMessageCache = true;
    }
}

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";
$wgCopyUploadsFromSpecialUpload = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = $config->getValue('defaultLang');

## Please edit Credentials.php to configure $wgSecretKey.
#$wgSecretKey = "";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
require_once "$IP/skins/{$config->getValue('skin')}/cavendish.php";
$wgDefaultSkin = "{$config->getValue('skin')}";
$wgAllowUserSkin = false;

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );
/*
require_once("$IP/Swift/lib/swift_required.php");

require_once("$IP/extensions/Widgets/Widgets.php");
$wgGroupPermissions['sysop']['editwidgets'] = true;
*/

require_once("$IP/extensions/AnnokiControl/AnnokiControl.php");

if($config->getValue('wikiPublic')){
    $egAnProtectUploads = false;
}

$wgRestrictDisplayTitle = false;
$wgLocalTZoffset = date_default_timezone_set("MST") / 60;
$wgRawHtml = true;
$wgEnableUploads       = true;
$wgMaxUploadSize = 1024*1024*50;
ini_set('upload_max_filesize', $wgMaxUploadSize);
$wgFileExtensions = array( 'png', 'jpg', 'jpeg', 'gif', 'tif', 'tiff', 'svg', 'psd', 'pdf', 'ppt', 'pptx', 'ods', 'odt', 'odp', 'doc', 'docx', 'xls', 'xlsx', 'tgz', 'zip', 'rar', 'flv', 'mov', 'avi', 'mpeg', 'ogv', 'mp4', 'mkv', 'm4v', 'mp3', 'flac', 'ogg', 'wmv', 'wav', 'txt');
$wgVerifyMimeType = false;
$wgAllowCopyUploads = true;
$wgAllowTitlesInSVG = true;
$wgMaxShellMemory = 402400;
$wgPasswordReminderResendTime = 0.1666; // ~ 10 minutes
$wgEditPageFrameOptions = 'SAMEORIGIN';
$wgImpersonating = false;
$wgDelegating = false;
$wgRealUser;

if (($key = array_search('application/zip', $wgMimeTypeExclusions)) !== false) {
    unset($wgMimeTypeExclusions[$key]);
}

// Whether or not to show custom deprication notices
define("DEBUG", true);

$wgRoleValues = array(INACTIVE => 0,
                      HQP => 1,
                      EXTERNAL => 2,
                      AG => 2,
                      NI => 5,
                      AR => 5,
                      CI => 6,
                      CHAMP => 7,
                      PARTNER => 7,
                      PS => 8,
                      PA => 8, // Might eventually be merged with PS
                      PL => 9,
                      TL => 11,
                      TC => 11,
                      APL => 11,
                      TC => 11,
                      EDI => 12,
                      COMMITTEE => 12,
                      EVALUATOR => 12,
                      ASD => 13,
                      SD => 13,
                      STAFF => 16,
                      MANAGER => 17,
                      ADMIN => 100);

$wgRoles = ($config->hasValue('wgRoles')) ? 
    $config->getValue('wgRoles') : 
    array(HQP, PS, EXTERNAL, AG, AR, CI, CHAMP, PARTNER, PL, ASD, SD, STAFF, MANAGER, ADMIN);

$wgAllRoles = ($config->hasValue('wgAllRoles')) ? 
    $config->getValue('wgAllRoles') :
    array(HQP, PS, STUDENT, EXTERNAL, AG, AR, CI, PA, PL, APL, TL, TC, EVALUATOR, CHAMP, PARTNER, ASD, SD, STAFF, MANAGER, ADMIN);

foreach($config->getValue('committees') as $role => $roleDef){
    define($role, $role);
    
    $wgRoleValues[$role] = $wgRoleValues[COMMITTEE];
    $wgRoles[] = $role;
    $wgAllRoles[] = $role;
}

foreach($config->getValue('roleAliases') as $alias => $role){
    define($alias, $alias);
    $wgRoleValues[$alias] = $wgRoleValues[$role];
    $wgRoles[] = $alias;
    $wgAllRoles[] = $alias;
    
    $config->setValue('roleDefs', array_merge($config->getValue('roleDefs'), array($alias => $alias)));
}

$config->setValue('roleDefs', array_merge($config->getValue('roleDefs'), $config->getValue('committees')));

function unaccentChars($str){
    $str = str_replace('š', 's', $str);
    $str = str_replace('Š', 'S', $str);
    return strtolower(strtr(utf8_decode($str), 
                      utf8_decode('àáâãäåçèéêëìíîïñòóôõöøùúûüýÿÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝ'), 
                                  'aaaaaaceeeeiiiinoooooouuuuyyAAAAAACEEEEIIIINOOOOOUUUUY'));
}

// Encodes a large json object (usually arrays)
// It still returns a string, but constructs it incrementally
function large_json_encode($data){
    $string = "";
    if(is_object($data)){
        $string .= "{";
    }
    else{
        $string .= "[";
    }
    $first = true;
    foreach($data as $key => $item){
        $encoded = json_encode($item);
        if($encoded !== false){
	        if ($first) {
		        $first = false;
	        } else {
		        $string .= ",";
	        }
	        if(is_object($data)){
                $string .= "$key:";
            }
	        $string .= $encoded;
	    }
    }
    if(is_object($data)){
        $string .= "}";
    }
    else{
        $string .= "]";
    }
    return $string;
}

function array_clean(array $haystack){
    foreach ($haystack as $key => $value) {
        if (is_array($value)) {
            $haystack[$key] = array_clean($value);
        } elseif (is_string($value)) {
            $value = trim($value);
        }

        if (!$value) {
            unset($haystack[$key]);
        }
    }

    return $haystack;
}

// https://arjunphp.com/flatten-nested-arrays-using-php/
function array_flatten($array, $prefix = '') {     
    $result = array();     
    foreach($array as $key=>$value) {
        if(is_array($value)) {
            $result = $result + array_flatten($value, $prefix . $key . '.');
        }
        else {
            $result[$prefix.$key] = $value;
        }
    }
    return $result;
}

function str_replace_first($search, $replace, $subject) {
    $pos = strpos($subject, $search);
    if ($pos !== false) {
        $subject = substr_replace($subject, $replace, $pos, strlen($search));
    }
    return $subject;
}

function str_replace_last($search, $replace, $subject) {
    $pos = strrpos($subject, $search);
    if($pos !== false) {
        $subject = substr_replace($subject, $replace, $pos, strlen($search));
    }
    return $subject;
}

function str_replace_every_other($needle, $replace, $haystack, &$count=null, $replace_first=true) {
    $count = 0;
    $offset = strpos($haystack, $needle);
    //If we don't replace the first, go ahead and skip it
    if (!$replace_first) {
        $offset += strlen($needle);
        $offset = strpos($haystack, $needle, $offset);
    }
    while ($offset !== false) {
        $haystack = substr_replace($haystack, $replace, $offset, strlen($needle));
        $count++;
        $offset += strlen($replace);
        $offset = strpos($haystack, $needle, $offset);
        if ($offset !== false) {
            $offset += strlen($needle);
            $offset = strpos($haystack, $needle, $offset);
        }
    }
    return $haystack;
}

function flatten(array $array) {
    $return = array();
    array_walk_recursive($array, function($a) use (&$return) { $return[] = $a; });
    return $return;
}

function adjustBrightness($hex, $steps) {
    // Steps should be between -255 and 255. Negative = darker, positive = lighter
    $steps = max(-255, min(255, $steps));

    // Normalize into a six character long hex string
    $hex = str_replace('#', '', $hex);
    if (strlen($hex) == 3) {
        $hex = str_repeat(substr($hex,0,1), 2).str_repeat(substr($hex,1,1), 2).str_repeat(substr($hex,2,1), 2);
    }

    // Split into three parts: R, G and B
    $color_parts = str_split($hex, 2);
    $return = '#';

    foreach ($color_parts as $color) {
        $color   = hexdec($color); // Convert to decimal
        $color   = max(0,min(255,$color + $steps)); // Adjust color
        $return .= str_pad(dechex($color), 2, '0', STR_PAD_LEFT); // Make two char hex code
    }

    return $return;
}

// A function to return the Roman Numeral, given an integer
function rome($num){
    // Make sure that we only use the integer portion of the value
    $n = intval($num);
    $result = '';

    // Declare a lookup array that we will use to traverse the number:
    $lookup = array('M' => 1000, 'CM' => 900, 'D' => 500, 'CD' => 400,
    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40,
    'X' => 10, 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1);

    foreach ($lookup as $roman => $value){
        // Determine the number of matches
        $matches = intval($n / $value);

        // Store that many characters
        $result .= str_repeat($roman, $matches);

        // Substract that from the number
        $n = $n % $value;
    }

    // The Roman numeral should be built, return it
    return $result;
}

/**
 * Returns a 'human readable' date from the given string
 * @param string $time The time in db timestamp format 'YYYY-MM-DD hh-mm-ss'
 * @param strin $format How to format the data (defaults to 'F j, Y')
 * @return string The date in the format 'F j, Y'
 */
function time2date($time, $format='F j, Y'){
    $strtime = strtotime($time);
    return date($format, $strtime);
}

function currentTimeStamp(){
    return date('Y-m-d H:i:s', time());
}

function cleanDate($date){
    $date = ($date <= 0) ? "0000-00-00" : $date;
    $date = (strlen($date) <= 4) ? "$date-01-01" : $date;
    return $date;
}

/**
 * Returns a HTML comment with the elapsed time since request.
 * This method has no side effects.
 * @return string
 */
function wfReportTimeOld() {
	global $wgRequest, $wgShowHostnames;
	$elapsed = $wgRequest->getElapsedTime();
    $mem = memory_get_peak_usage(true);
    $bytes = array(1 => 'B', 2 => 'KiB', 3 => 'MiB', 4 => 'GiB');
    $ind = 1;
    while ($mem > 1024 && $ind < count($bytes)) {
	    $mem = $mem / 1024;
	    $ind++;
    }
    
	return $wgShowHostnames
		? sprintf( "<!-- Served by %s in %01.3f secs (%01.1f %s used). -->", wfHostname(), $elapsed, $mem, $bytes[$ind] )
		: sprintf( "<!-- Served in %01.3f secs (%01.1f %s used). -->", $elapsed, $mem, $bytes[$ind] );
}

// http://stackoverflow.com/questions/4757061/which-ics-parser-written-in-php-is-good
function icsToArray($icsFile) {
    $icsFile = str_replace("\r", "", $icsFile);
    $icsFile = str_replace("\n ", "", $icsFile);
    $icsData = explode("BEGIN:", $icsFile);

    foreach($icsData as $key => $value) {
        $data = explode("\n", $value);
        if($data[0] == "VEVENT"){
            $icsDatesMeta[$key] = explode("\n", $value);
        }
    }

    foreach($icsDatesMeta as $key => $value) {
        foreach($value as $subKey => $subValue) {
            if ($subValue != "") {
                if ($key != 0 && $subKey == 0) {
                    $icsDates[$key]["BEGIN"] = $subValue;
                } else {
                    $subValueArr = explode(":", $subValue, 2);
                    $value = @$subValueArr[0];
                    if(strstr($value, ";") !== false){
                        $values = explode(";", $value);
                        $array = array();
                        foreach($values as $k => $val){
                            if(strstr($val, "=") !== false){
                                $val = explode("=", $val);
                                $array[$val[0]] = str_replace('\n', "\n", 
                                                  str_replace('\,', ',', 
                                                  str_replace('\;', ';', $val[1])));
                            }
                        }
                        $array['VALUE'] = str_replace('\n', "\n", 
                                          str_replace('\,', ',', 
                                          str_replace('\;', ';', $subValueArr[1])));
                        $icsDates[$key][$values[0]][] = $array;
                    }
                    else{
                        $icsDates[$key][$value] = str_replace('\n', "\n", 
                                                  str_replace('\,', ',', 
                                                  str_replace('\;', ';', $subValueArr[1])));
                    }
                }
            }
        }
    }

    return $icsDates;
}

function sanitizeInput($str){
    $str = str_replace("&", "&amp;", $str);
    $str = str_replace("<", "&lt;", $str);
    $str = str_replace(">", "&gt;", $str);
    $str = str_replace("\"", "&quot;", $str);
    $str = str_replace("'", "&#x27;", $str);
    $str = str_replace("/", "&#x2F;", $str);
    return $str;
}

function knatsort(&$arr){return uksort($arr,function($a, $b){return strnatcmp($a,$b);});}

// https://gist.github.com/MarxBro/f08a8768f06f57cff4e627cb4a9a4630
function recursive_implode($glue, $array, $include_keys = false, $trim_all = true){
	$glued_string = '';

	// Recursively iterates array and adds key/value to glued string
	array_walk_recursive($array, function($value, $key) use ($glue, $include_keys, &$glued_string)
	{
		$include_keys and $glued_string .= $key.$glue;
		$glued_string .= $value.$glue;
	});

	// Removes last $glue from string
	strlen($glue) > 0 and $glued_string = substr($glued_string, 0, -strlen($glue));

	// Trim ALL whitespace
	$trim_all and $glued_string = preg_replace("/(\s)/ixsm", '', $glued_string);

	return (string) $glued_string;
}

function avg($a){
    return array_sum($a)/max(count($a),1);
}

// https://www.designcise.com/web/tutorial/how-to-calculate-the-median-of-an-array-of-numbers-in-php
function median($a){
    // 1: sort array in ascending order
    sort($a);

    $totalArrElems = count($a);
    $middleIndex = $totalArrElems / 2;

    // 2.1: if odd, return middle element
    if ($totalArrElems % 2 !== 0) {
        return $a[floor($middleIndex)];
    }

    // 2.2: if even, return average of two middle elements
    return ($a[$middleIndex - 1] + $a[$middleIndex]) / 2;
}

// https://learnetutorials.com/php/programs/calculate-standard-deviation
function stdev($a){
    $count = count($a);
    $v = 0;
    $avg = array_sum($a) / $count;
    foreach ($a as $i) {
        $v += pow(($i - $avg), 2);
    }
    $stdev = sqrt($v / $count);
    if(is_nan($stdev)){
        return 0;
    }
    return $stdev;
}

function showLanguage($english, $french){
    global $wgLang;
    return ($wgLang->getCode() == 'en') ? $english : $french;
}

if(file_exists($config->getValue("encryptionKey"))){
    $_SERVER['ENC_KEY'] = file_get_contents($config->getValue("encryptionKey"));
}

function encrypt($plaintext, $ignoreError=false){
    if(!isset($_SERVER['ENC_KEY'])){
        if($ignoreError){ return $plaintext; }
        throw new Exception('ENC_KEY not defined');
    }
    $plaintext = str_pad($plaintext, 50, "\0", STR_PAD_LEFT); // Pad so that the response can't be inferred from the length of the encrypted string
    $key = $_SERVER['ENC_KEY'];
    $ivlen = openssl_cipher_iv_length($cipher="AES-128-CBC");
    $iv = openssl_random_pseudo_bytes($ivlen);
    $ciphertext_raw = openssl_encrypt($plaintext, $cipher, $key, 0, $iv);
    $hmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);
    $ciphertext = base64_encode( $iv.$hmac.$ciphertext_raw );
    return $ciphertext;
}

function decrypt($ciphertext, $ignoreError=false){
    if(!isset($_SERVER['ENC_KEY'])){
        if($ignoreError){ return $ciphertext; }
        throw new Exception('ENC_KEY not defined');
    }
    $key = $_SERVER['ENC_KEY'];
    $c = base64_decode($ciphertext);
    $ivlen = openssl_cipher_iv_length($cipher="AES-128-CBC");
    $iv = substr($c, 0, $ivlen);
    $hmac = substr($c, $ivlen, $sha2len=32);
    $ciphertext_raw = substr($c, $ivlen+$sha2len);
    $original_plaintext = openssl_decrypt($ciphertext_raw, $cipher, $key, 0, $iv);
    $original_plaintext = ltrim($original_plaintext, "\0");
    return $original_plaintext;
}

?>
